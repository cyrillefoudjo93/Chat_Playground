version: '3.9'

services:
  # Backend NestJS Service with hot-reloading
  backend-dev:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: builder
    container_name: chat-playground-backend-dev
    command: pnpm run start:dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3000
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_HOST=redis-dev
      - DEBUG=nest*,axios # Add this line for detailed NestJS and Axios logging
    ports:
      - "3000:3000"
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/logs:/app/logs
    networks:
      - chat-network-dev
    depends_on:
      - redis-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give the backend time to start before health checks begin

  # Redis for rate limiting and caching
  redis-dev:
    image: redis:alpine
    container_name: chat-playground-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data-dev:/data
    networks:
      - chat-network-dev
    healthcheck: # Added healthcheck for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Frontend React Service with hot-reloading
  frontend-dev:
    build:
      context: ./hands-free-chat
      dockerfile: Dockerfile
      target: builder
    container_name: chat-playground-frontend-dev
    command: pnpm run dev -- --host
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./hands-free-chat:/app
      - /app/node_modules
    networks:
      - chat-network-dev
    depends_on:
      backend-dev:
        condition: service_healthy # Wait for backend-dev to be healthy

networks:
  chat-network-dev:
    driver: bridge

volumes:
  redis-data-dev:
    driver: local
